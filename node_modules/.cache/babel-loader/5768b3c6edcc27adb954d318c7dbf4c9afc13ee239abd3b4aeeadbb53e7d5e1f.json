{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Padmavati Shankar\\\\3D-WebXR-Furniture\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex = index;\n\n    // remove image selection from others to indicate unclicked\n    for (let i = 1; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n    // set image to selected\n    e.target.classList.add(\"clicked\");\n  };\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\", \"Standing_lamp.glb\", \"Dining_Set.glb\", \"Little_Bookcase.glb\", \"Plant_Decor.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let controller;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    // Don't add the XREstimatedLight to the scene initially\n    // It doesn't have any estimated lighting values until an AR session starts\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      // Swap the default light out for the estimated one so we start getting some estimated values.\n      scene.add(xrLight);\n      scene.remove(light);\n      // The estimated lighting also provides an env cubemap which we apply here\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      // Swap the lights back when we stop receiving estimated values\n      scene.add(light);\n      scene.remove(xrLight);\n\n      // Revert back to the default environment\n      // scene.environment =\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      // this one will set the position but not the rotation\n      // newModel.position.setFromMatrixPosition(reticle.matrix);\n\n      // this will set the position and the rotation to face you\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n    }\n  }\n\n  // const onClicked = (e, selectItem, index) => {\n  //   itemSelectedIndex = index;\n\n  //   // remove image selection from others to indicate unclicked\n  //   for (let i = 0; i < models.length; i++) {\n  //     const el = document.querySelector(`#item` + i);\n  //     el.classList.remove(\"clicked\");\n  //   }\n  //   // set image to selected\n  //   e.target.classList.add(\"clicked\");\n  // };\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          reticle.visible = true;\n          reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","onClicked","e","selectItem","index","itemSelectedIndex","i","models","length","el","document","querySelector","classList","remove","target","add","modelScaleFactor","items","controller","init","setupFurnitureSelection","animate","myCanvas","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","newModel","clone","matrix","decompose","quaternion","scale","scaleFactor","preventDefault","stopPropagation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","fromArray","getPose","transform","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Padmavati Shankar/3D-WebXR-Furniture/src/App.js"],"sourcesContent":["import \"./App.css\";\r\nimport * as THREE from \"three\";\r\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\r\n\r\nfunction App() {\r\n  let reticle;\r\n  let hitTestSource = null;\r\n  let hitTestSourceRequested = false;\r\n\r\n  let scene, camera, renderer;\r\n\r\n    const onClicked = (e, selectItem, index) => {\r\n    itemSelectedIndex = index;\r\n\r\n    // remove image selection from others to indicate unclicked\r\n    for (let i = 1; i < models.length; i++) {\r\n      const el = document.querySelector(`#item` + i);\r\n      el.classList.remove(\"clicked\");\r\n    }\r\n    // set image to selected\r\n    e.target.classList.add(\"clicked\");\r\n  };\r\n\r\n  let models = [\r\n    \"./dylan_armchair_yolk_yellow.glb\",\r\n    \"./ivan_armchair_mineral_blue.glb\",\r\n    \"./marble_coffee_table.glb\",\r\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\r\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\r\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\r\n    \"Standing_lamp.glb\",\r\n    \"Dining_Set.glb\",\r\n    \"Little_Bookcase.glb\",\r\n    \"Plant_Decor.glb\"\r\n  ];\r\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01, 0.01,0.01,0.01];\r\n  let items = [];\r\n  let itemSelectedIndex = 0;\r\n\r\n  let controller;\r\n\r\n  init();\r\n  setupFurnitureSelection();\r\n  animate();\r\n\r\n  function init() {\r\n    let myCanvas = document.getElementById(\"canvas\");\r\n    scene = new THREE.Scene();\r\n    camera = new THREE.PerspectiveCamera(\r\n      70,\r\n      myCanvas.innerWidth / myCanvas.innerHeight,\r\n      0.01,\r\n      20\r\n    );\r\n\r\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\r\n    light.position.set(0.5, 1, 0.25);\r\n    scene.add(light);\r\n\r\n    renderer = new THREE.WebGLRenderer({\r\n      canvas: myCanvas,\r\n      antialias: true,\r\n      alpha: true,\r\n    });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\r\n    renderer.xr.enabled = true;\r\n\r\n    // Don't add the XREstimatedLight to the scene initially\r\n    // It doesn't have any estimated lighting values until an AR session starts\r\n    const xrLight = new XREstimatedLight(renderer);\r\n    xrLight.addEventListener(\"estimationstart\", () => {\r\n      // Swap the default light out for the estimated one so we start getting some estimated values.\r\n      scene.add(xrLight);\r\n      scene.remove(light);\r\n      // The estimated lighting also provides an env cubemap which we apply here\r\n      if (xrLight.environment) {\r\n        scene.environment = xrLight.environment;\r\n      }\r\n    });\r\n\r\n    xrLight.addEventListener(\"estimationend\", () => {\r\n      // Swap the lights back when we stop receiving estimated values\r\n      scene.add(light);\r\n      scene.remove(xrLight);\r\n\r\n      // Revert back to the default environment\r\n      // scene.environment =\r\n    });\r\n\r\n    let arButton = ARButton.createButton(renderer, {\r\n      requiredFeatures: [\"hit-test\"],\r\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\r\n      domOverlay: { root: document.body },\r\n    });\r\n    arButton.style.bottom = \"20%\";\r\n    document.body.appendChild(arButton);\r\n\r\n    for (let i = 0; i < models.length; i++) {\r\n      const loader = new GLTFLoader();\r\n      loader.load(models[i], function (glb) {\r\n        let model = glb.scene;\r\n        items[i] = model;\r\n      });\r\n    }\r\n\r\n    controller = renderer.xr.getController(0);\r\n    controller.addEventListener(\"select\", onSelect);\r\n    scene.add(controller);\r\n\r\n    reticle = new THREE.Mesh(\r\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\r\n      new THREE.MeshBasicMaterial()\r\n    );\r\n    reticle.matrixAutoUpdate = false;\r\n    reticle.visible = false;\r\n    scene.add(reticle);\r\n  }\r\n\r\n  function onSelect() {\r\n    if (reticle.visible) {\r\n      let newModel = items[itemSelectedIndex].clone();\r\n      newModel.visible = true;\r\n      // this one will set the position but not the rotation\r\n      // newModel.position.setFromMatrixPosition(reticle.matrix);\r\n\r\n      // this will set the position and the rotation to face you\r\n      reticle.matrix.decompose(\r\n        newModel.position,\r\n        newModel.quaternion,\r\n        newModel.scale\r\n      );\r\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\r\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\r\n\r\n      scene.add(newModel);\r\n    }\r\n  }\r\n\r\n  // const onClicked = (e, selectItem, index) => {\r\n  //   itemSelectedIndex = index;\r\n\r\n  //   // remove image selection from others to indicate unclicked\r\n  //   for (let i = 0; i < models.length; i++) {\r\n  //     const el = document.querySelector(`#item` + i);\r\n  //     el.classList.remove(\"clicked\");\r\n  //   }\r\n  //   // set image to selected\r\n  //   e.target.classList.add(\"clicked\");\r\n  // };\r\n\r\n  function setupFurnitureSelection() {\r\n    for (let i = 0; i < models.length; i++) {\r\n      const el = document.querySelector(`#item` + i);\r\n      el.addEventListener(\"beforexrselect\", (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      });\r\n      el.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onClicked(e, items[i], i);\r\n      });\r\n    }\r\n  }\r\n\r\n  function animate() {\r\n    renderer.setAnimationLoop(render);\r\n  }\r\n\r\n  function render(timestamp, frame) {\r\n    if (frame) {\r\n      const referenceSpace = renderer.xr.getReferenceSpace();\r\n      const session = renderer.xr.getSession();\r\n\r\n      if (hitTestSourceRequested === false) {\r\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\r\n          session\r\n            .requestHitTestSource({ space: referenceSpace })\r\n            .then(function (source) {\r\n              hitTestSource = source;\r\n            });\r\n        });\r\n\r\n        session.addEventListener(\"end\", function () {\r\n          hitTestSourceRequested = false;\r\n          hitTestSource = null;\r\n        });\r\n\r\n        hitTestSourceRequested = true;\r\n      }\r\n\r\n      if (hitTestSource) {\r\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\r\n\r\n        if (hitTestResults.length) {\r\n          const hit = hitTestResults[0];\r\n\r\n          reticle.visible = true;\r\n          reticle.matrix.fromArray(\r\n            hit.getPose(referenceSpace).transform.matrix\r\n          );\r\n        } else {\r\n          reticle.visible = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    renderer.render(scene, camera);\r\n  }\r\n\r\n  return <div className=\"App\"></div>;\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}